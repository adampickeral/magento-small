heat_template_version: 2015-10-15

description: |
  #### Low Traffic Site

  A Single Linux server with
  [Magento 1.9.2.0 Community Edition](http://www.magentocommerce.com/product/community-edition/)
  installed with [nginx](http://nginx.org/en/), [PHP FPM](http://php-fpm.org/about/), a
  Cloud Load Balancer for content caching, and a Cloud Database running
  [Percona](https://www.percona.com/software/mysql-database/percona-server).

  This deployment is intended for simple test cases and low traffic scenarios. It is not
  designed for high traffic events and has limited scalability.


parameter_groups:

- label: Magento Settings
  parameters:
  - eula
  - domain_name
  - domain_sftp_user
  - magento_admin_fname
  - magento_admin_lname
  - magento_admin_email
  - magento_admin_user

- label: Backup Configuration Settings
  parameters:
  - rackspace_user_name
  - rackspace_apikey

parameters:

  eula:
    type: boolean
    label: Agree to terms?
    description: You must agree to the terms of the Magento Community Edition License
    constraints:
    - allowed_values:
      - True
      description: |
        You must agree to the Magento Community Edition License
        which can be found here: http://opensource.org/licenses/osl-3.0.php

  magento_admin_fname:
    type: string
    default: Magento
    label: Admin First Name
    description: Magento administrator first name

  magento_admin_lname:
    type: string
    default: Administrator
    label: Admin Last Name
    description: Magento administrator last name

  magento_admin_email:
    type: string
    default: admin@example.com
    label: Admin Email
    description: Magento administrator contact email

  magento_admin_user:
    type: string
    default: admin
    label: Admin User
    description: Magento administrator user name

  domain_name:
    type: string
    default: example.com
    label: Site Domain
    description: Magento site domain name

  domain_sftp_user:
    type: string
    default: magento_sftp
    label: Domain SFTP user
    description: Domain and PHP-FPM user

  rackspace_user_name:
    type: string
    label: User Name
    description: Your Rackspace Cloud user name for backup agent configuration

  rackspace_apikey:
    type: string
    label: API Key
    description: Your Rackspace Cloud API Key for backup agent configuration
    hidden: True

  flavor:
    type: string
    default: 8 GB Performance
    constraints:
    - allowed_values:
      - 8GB Standard Instance
      - 15GB Standard Instance
      - 30GB Standard Instance
      - 8 GB Performance
      - 15 GB Performance
      - 30 GB Performance
      - 60 GB Performance
      - 90 GB Performance
      - 120 GB Performance
    label: Server Size
    description: Amount of RAM for the Magento server

  db_disk:
    type: number
    default: 10
    constraints:
    - range:
        min: 10
        max: 500
    label: Database Disk (in GB)
    description: Size of the Magento database server disk in GB

  include_samples:
    type: boolean
    default: False
    label: Include Sample Data?
    description: Include Magento sample store data

resources:

  server_pw:
    type: OS::Heat::RandomString

  mysql_pw:
    type: OS::Heat::RandomString

  sftp_password:
    type: OS::Heat::RandomString

  magento_admin_pass:
    type: OS::Heat::RandomString

  agent_token:
    type: Rackspace::CloudMonitoring::AgentToken
    properties:
      label: { get_param: "OS::stack_name" }

  monitoring_agent_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            wget http://meta.packages.cloudmonitoring.rackspace.com/centos-7-x86_64/rackspace-cloud-monitoring-meta-stable-1-0.noarch.rpm
            rpm -Uvh rackspace-cloud-monitoring-meta-stable-1-0.noarch.rpm
            yum update
            yum -y install rackspace-monitoring-agent
            echo "monitoring_token {{token}}" > /etc/rackspace-monitoring-agent.cfg
            service rackspace-monitoring-agent restart
          params:
            "{{token}}": { get_resource: agent_token }

  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config: |
        #!/bin/bash
        set -e
        git clone --progress https://github.com/rackspace-orchestration-templates/ansible-roles.git /etc/ansible/roles > $heat_outputs_path.results 2>&1
        git clone --progress https://github.com/rack-roles/holland.git /etc/ansible/roles/holland >> $heat_outputs_path.results 2>&1
        git clone --progress https://github.com/rack-roles/cloud-backup-agent.git /etc/ansible/roles/cloud-backup-agent >> $heat_outputs_path.results 2>&1
        rm -rf /etc/ansible/roles/holland/meta

  magento_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure Magento
          hosts: localhost
          connection: local
          roles:
          - nginx
          - php
          - php-fpm
          - redis
          - magento-ce
          - holland
          - holland-config
          - cloud-backup-agent

  deploy_monitoring_agent:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: monitoring_agent_config
      server:
        get_resource: magento_server

  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: magento_server

  deploy_magento:
    type: OS::Heat::SoftwareDeployment
    depends_on:
    - deploy_monitoring_agent
    - deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago" 
        webserver: nginx
        vhost_domain: { get_param: domain_name }
        vhost_aliases: "www.{{ vhost_domain }}"
        vhost_user: nginx
        vhost_user_uid: 1010
        vhost_user_shell: /sbin/nologin
        document_root: "/var/www/vhosts/{{ vhost_domain }}/httpdocs"
        domain_sftp_user: { get_param: domain_sftp_user }
        domain_sftp_password: { get_attr: [ sftp_password, value ] }
        placeholder_content: { get_param: include_samples }
        redis_host: localhost
        redis_instances:
        - { name: 'fpc', port: '6381', persistent: 'FALSE', maxmemory: '1gb' }
        - { name: 'obj', port: '6379', persistent: 'FALSE', maxmemory: '1gb' }
        - { name: 'ses', port: '6380', persistent: 'TRUE', maxmemory: '1gb' }
        mysql_host_ip: { get_attr: [ magento_db, hostname ] }
        magento_db_name: magento
        magento_db_user: magento
        magento_db_password: { get_attr: [ mysql_pw, value ] }
        magento_admin_fname: { get_param: magento_admin_fname }
        magento_admin_lname: { get_param: magento_admin_lname }
        magento_admin_email: { get_param: magento_admin_email }
        magento_admin_user: { get_param: magento_admin_user }
        magento_admin_pass: { get_attr: [ magento_admin_pass, value ] }
        rackspace_apikey: { get_param: rackspace_apikey }
        rackspace_username: { get_param: rackspace_user_name }
      config:
        get_resource: magento_config
      server:
        get_resource: magento_server

  caching_lb:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name:
        str_replace:
          template: stack-lb
          params:
            stack: { get_param: "OS::stack_name" }
      port: 80
      virtualIps:
      - ipVersion: IPV4
        type: PUBLIC
      protocol: HTTP
      contentCaching: ENABLED
      healthMonitor:
        attemptsBeforeDeactivation: 3
        timeout: 10
        type: HTTP
        delay: 10
        type: HTTP
      nodes:
      - addresses: [ { get_attr: [ magento_server, networks, private, 0 ] } ]
        port: 80
      metadata:
        rax-heat: { get_param: "OS::stack_id" }

  bootstrap:
    type: https://raw.githubusercontent.com/rackspace-orchestration-templates/software-config-bootstrap/master/bootconfig_yum_ansible.yaml

  access_key:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: stack-keypair
          params:
            stack: { get_param: "OS::stack_name" }
      save_private_key: True

  magento_server:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: stack-magento-server
          params:
            stack: { get_param: "OS::stack_name" }
      image: CentOS 7 (PVHVM)
      key_name: { get_resource: access_key }
      flavor: { get_param: flavor }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_attr: [ bootstrap, config ] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }

#  backup:
#    type: Rackspace::Cloud::BackupConfig
#    depends_on: deploy_magento
#    properties:
#      host_ip_address: { get_attr: [ magento_server, accessIPv4 ] }
#      BackupConfigurationName:
#        str_replace:
#          template: stack_backup
#          params:
#            stack: { get_param: "OS::stack_name" }
#      Inclusions:
#      - FilePath: "/var/spool/holland/default"
#      NotifyFailure: true
#      NotifyRecipients: { get_param: magento_admin_email }
#      TimeZoneId: Central Standard Time
#      StartTimeAmPm: AM
#      StartTimeHour: 1
#      StartTimeMinute: 0
#      DayOfWeekId: null
#      HourInterval: null

  cpu_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_monitoring_agent
    properties:
      entity: { get_resource: magento_server }
      type: agent.cpu
      label: cpu_check
      details: {}
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10

  mem_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_monitoring_agent
    properties:
      entity: { get_resource: magento_server }
      type: agent.memory
      label: mem_check
      details: {}
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10

  http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_magento
    properties:
      entity: { get_resource: magento_server }
      type: remote.http
      label: http_check
      details:
        url:
          str_replace:
            template: "http://ip"
            params:
              ip: { get_attr: [ caching_lb, PublicIp ] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [ caching_lb, PublicIp ] }
      target_receiver: IPv4

  redis_check_6381:
    type: Rackspace::CloudMonitoring::Check
    depends_on:
    - deploy_monitoring_agent
    - deploy_magento
    properties:
      entity: { get_resource: magento_server }
      type: agent.redis
      label: redis_check_6381
      details:
        host: localhost
        port: 6381
        timeout: 100
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10

  redis_check_6379:
    type: Rackspace::CloudMonitoring::Check
    depends_on:
    - deploy_monitoring_agent
    - deploy_magento
    properties:
      entity: { get_resource: magento_server }
      type: agent.redis
      label: redis_check_6379
      details:
        host: localhost
        port: 6379
        timeout: 100
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10

  redis_check_6380:
    type: Rackspace::CloudMonitoring::Check
    depends_on:
    - deploy_monitoring_agent
    - deploy_magento
    properties:
      entity: { get_resource: magento_server }
      type: agent.redis
      label: redis_check_6380
      details:
        host: localhost
        port: 6380
        timeout: 100
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 30
      timeout: 10  

  magento_db:
    type: OS::Trove::Instance
    properties:
      name:
        str_replace:
          template: stack-magento-db
          params:
            stack: { get_param: "OS::stack_name" }
      datastore_type: percona
      flavor: 4GB Instance
      size: { get_param: db_disk }
      databases:
      - name: magento
      users:
      - name: magento
        password: { get_attr: [ mysql_pw, value ] }
        databases:
        - magento

outputs:

  ssh_pub_key:
    description: SSH Public Key
    value:
      get_attr: [ access_key, public_key ]

  ssh_priv_key:
    description: SSH Private Key
    value:
      get_attr: [ access_key, private_key ]

  lb_ip:
    description: Load Balancer IP
    value:
      get_attr: [ caching_lb, PublicIp ]

  server_pub_ip:
    description: Server Public IP
    value:
      get_attr: [ magento_server, accessIPv4 ]

  magento_domain:
    description: Magento Domain
    value:
      get_param: domain_name

  admin_url:
    description: Admin URL
    value:
      str_replace:
        template: "https://domain/admin"
        params:
          domain: { get_param: domain_name }

  domain_sftp_user:
    description: SFTP User
    value:
      get_param: domain_sftp_user

  domain_sftp_password:
      description: SFTP User Password
      value:
        get_attr: [ sftp_password, value ]

  magento_url:
    description: Store URL
    value:
      str_replace:
        template: "http://domain"
        params:
          domain: { get_param: domain_name }

  magento_db_name:
    description: Magento database name
    value: magento

  magento_db_user:
    description: Magento database user
    value: magento

  magento_db_password:
    description: Magento database user password
    value:
      get_attr: [ mysql_pw, value ]

  magento_admin_user:
    description: Magento Admin User
    value:
      get_param: magento_admin_user

  magento_admin_password:
    description: Magento Admin Password
    value:
      get_attr: [ magento_admin_pass, value ]

